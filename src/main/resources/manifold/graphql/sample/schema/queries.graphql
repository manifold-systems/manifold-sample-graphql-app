#
# Sample queries against the `movies.graphql` schema file
#
# Use Manifold to access queryies type-safely in Java directly by name such as MovieQuery.builder()...
#

query MovieQuery($title: String, $genre: Genre, $releaseDate: Date) {
  movies(title: $title, genre: $genre, releaseDate: $releaseDate) {
    id
    title
    genre
    releaseDate
    starring {
      typename: __typename
      ... on Actor {
        id
        name
      }
      ... on Animal {
        kind
      }
    }
    cast {
      id
      name
      type
      actor {
        id
        name
      }
    }
  }
}

query ActorQuery($title: String!, $genre: Genre) {
  actors(title: $title, genre: $genre) {
    ... on Person {
      id
      name
    }
    ... on Animal {
      id
      name
      kind
    }
  }
}

query OneMovie($id: ID!) {
  movie(id: $id) {
    id
    title
    genre
    releaseDate
    cast {
      id
      name
      actor {
        name
      }
    }
    starring {
      ... on Actor {
        id
        name
      }
    }
  }
}

query OneRole($id: ID!) {
  role(id: $id) {
    id
    name
    type
    actor {
      id
      name
    }
  }
}

query OnePerson($id: ID!) {
  person(id: $id) {
    id
    name
    dateOfBirth
    nationality
    height
  }
}

query ManyPersons {
  persons {
    name
  }
}

query OneAnimal($id: ID!) {
  animal(id: $id) {
    id
    name
    kind
    nationality
  }
}

query OneReview($id: ID!) {
  review(id: $id) {
    id
    movie {
      id
      title
    }
    stars
    comment
  }
}

query CompareRoles($id1: ID!, $id2: ID!)
{
  leftComparison: role(id: $id1) {
    actor {
      ...comparisonFields
    }
  }
  rightComparison: role(id: $id2) {
    actor {
      ...comparisonFields
    }
  }
}

#
# Fragments
#

fragment comparisonFields on Actor {
  name
  ... on Person {
      height
  }
}

#
# Mutations
#

mutation ReviewMutation($movieId: ID!, $review: ReviewInput!) {
  createReview(movieId: $movieId, review: $review) {
    id
    stars
    comment
  }
}

#
# Extension Queries
#

extend type QueryRoot {
  actorsByGenre(genre: Genre!) : [CastMember!]!
}

query ActorsByGenreQuery($genre: Genre!) {
  actorsByGenre(genre: $genre) {
    ... on Actor {
      id
      name
    }
    ... on Animal {
      kind
    }
  }
}
